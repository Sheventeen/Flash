import React, { useEffect, useState } from 'react'
import {animate, motion} from 'framer-motion';
import { useAuthStore } from '../store/authStore';
import { Link, useNavigate } from 'react-router-dom';
import { Loader, LogOut, User } from 'lucide-react';
import Button from '../components/Button';
import Flashcard from '../../../backend/models/FlashcardModel';


const DashBoardPage = () => {
    const {user, logout, isLoading, getDecks} = useAuthStore();
    const [isRotated, setIsRotated] = useState(false);
    const [userDecks, setUserDecks] = useState([]);
    const [randomDeck, setRandomDeck] = useState(-1);
    const [shuffledDeck, setShuffledDeck] = useState([]);
    const [know, setKnow] = useState([]);
    const [dontKnow, setDontKnow] = useState([]);

    const navigate = useNavigate();

      useEffect(() => {
       console.log('Page rerender seffect') 
      })

      useEffect(() => {
      const topics = user.decks.map( (deckObj) => deckObj.deck)
      setUserDecks(topics);
    }, []);
    
       useEffect(() => {      
        setRandomDeck(Math.floor(Math.random() * userDecks.length));
        const deck = userDecks[randomDeck]; 
        console.log('deck',deck);

        for(let i = randomDeck.length - 1;i > 0; i--){
          const j = Math.floor(Math.random() * (i + 1));
          [deck[i], deck[j]] = [deck[j], deck[i]]
        }
        setShuffledDeck(deck)
        console.log('render ', shuffledDeck)
      },[userDecks])

    const handleLogOut = async(e) => {
      e.preventDefault();
      try {
        await logout();
        navigate('/login');
      } catch (error) {
        console.log(error)
      }
    }

    const handleFlipCard = (e) => {
      setIsRotated(prev => !prev)

    }

  return (
    <>
    <div className=' h-12 justify-end flex items-center px-5 space-x-5 sticky top-0' >
      <User className='w-8 hover:cursor-pointer'/> 
      <LogOut className='h-8 w-8 hover:cursor-pointer' onClick={handleLogOut} />
    </div>

    {/* screen */}
    <div className='flex items-center min-h-screen border-2 border-amber-300 '> 

      <div className='border-r-emerald-500 md:lg w-1/12 border-2 flex flex-col min-h-screen items-center'>
        <Button name='-Search'/>
        <Button name='-Home'/>
        <Button name='-Create Deck'/>
        <Button name='-My Decks'/>
        <Button name='-About' />
        <Button name='-Help' />
      </div>

      <div className=' w-11/12 border-2 border-red-600 flex flex-col min-h-screen items-center p-5'>
      <div className='flex justify-center'>
          <p className='justify-center flex items-center'>{user.decks[randomDeck]?.topic}</p>
      </div>

      <div className='flex flex-1 justify-center items-center'>
        <motion.div
        onClick={() => {
          handleFlipCard();
          
        }}
        animate={{rotateY: isRotated ? 180 : 0}}
        transition={{duration: 0.4}}
        className='max-w-md w-full min-w-135 bg-[#00688f]/70 backdrop-filter backdrop-blur-xl 
        rounded-md shadow-xl p-2 min-h-80 flex justify-center items-center hover:cursor-pointer'>
                <div className='justify-center items-center flex flex-1 overflow-auto'>
                    {!isRotated ? 
                      <p className='text-md break-words whitespace-normal w-full text-center'>{userDecks[randomDeck]?.[0]?.front}</p>
                      :
                      <p className='text-md break-words whitespace-normal w-full text-center ' 
                      style={{ transform: 'rotateY(180deg)' }}
                      transition={{duration:0}}
                      >
                        
                        {userDecks[0]?.[1]?.back}</p>
                    }  
                </div>        
        </motion.div>
        </div>
      </div>
    </div>
    </>
  )
}
export default DashBoardPage